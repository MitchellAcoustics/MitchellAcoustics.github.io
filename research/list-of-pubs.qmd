---
title: "List of Publications"
echo: false
jupyter: python3
section-divs: false
keep-md: true
keep-ipynb: true
freeze: auto
---

## PhD Thesis

You can download my PhD Thesis, titled [*Predictive Modelling of Complex Urban Soundscapes: Enabling an engineeering approach to soundscape design*](./Andrew%20Mitchell%20PhD%20Thesis%20Final.pdf).

```{python}
# | warning: false
# | output: false
import yaml
from bib2yaml import bib2yaml
from IPython.display import display, Markdown, HTML


def readable_list(_s):
    if len(_s) < 3:
        return " and ".join(map(str, _s))
    *a, b = _s
    return f"{', '.join(map(str, a))}, and {b}"


def get_bib_entries(bib_file):
    f = open(bib_file, "r")
    entries = {}
    for x in f:
        if x.strip().startswith("@"):
            id = x.split("{")[1].split(",")[0]
            entries[id] = ""
        elif x.startswith(("}", "\n")):
            continue
        elif "Crossref" in x:
            continue
        elif x.strip().startswith(
            (
                "annotation",
                "file",
                "timestamp",
                "qualityassured",
                "keywords",
                "abstract",
                "TLDR",
            )
        ):
            continue
        elif x.strip() == "}":
            continue
        else:
            entries[id] += x.strip()
    f.close()
    return entries


def get_bib_entry(entries, id):
    try:
        return entries[id]
    except:
        return None


def button(url, str, icon):
    icon_base = icon[:2]
    return f"""<a class="btn btn-outline-dark btn-sm", href="{url}" target="_blank" rel="noopener noreferrer">
        <i class="{icon_base} {icon}" role='img' aria-label='{str}'></i>
        {str}
    </a>"""


def button_copy_to_text(label, entry, icon):
    icon_base = icon[:2]
    return f"""<a class="btn btn-outline-dark btn-sm" onclick="copyToClipboard('{entry}')">
        <i class="{icon_base} {icon}" role='img' aria-label='{label}'></i>
        {label}
    </a>"""


def get_authors(author_str: list[dict]):
    try:
        authors = [f"{aut['given']} {aut['family']}" for aut in author_str]
    except:
        pass
    return authors


def doi_badge(doi_str: str):
    return f'<span class="__dimensions_badge_embed__" data-doi={doi_str} data-hide-zero-citations="true" data-style="small_rectangle"></span><script async src="https://badge.dimensions.ai/badge.js" charset="utf-8"></script>'


me = "Andrew Mitchell"
yaml_data = yaml.safe_load(open("MitchellPublications.yaml"))
bib_entries = get_bib_entries("MitchellPublications.bib")
pub_strs = {"pubs": {}, "confs": {}, "others": {}}

excepts = {}
for data in yaml_data["references"]:
    try:
        title_str = data["title"]
        entry_type = data.get("type")
        authors = get_authors(data["author"])
        authors = [
            aut if aut != me else "<strong>Andrew Mitchell</strong>" for aut in authors
        ]
        if len(authors) > 6:
            authors = authors[:6]
            authors.append("et. al")
        author_str = readable_list(authors)

        year_str = data["issued"][0]["year"]

        buttons = []
        preprint = data.get("preprint")
        if preprint is not None:
            buttons.append(button(preprint, "Preprint", "bi-file-earmark-pdf"))

        github = data.get("github")
        if github is not None:
            buttons.append(button(github, "Github", "bi-github"))

        pub_doi = data.get("DOI")
        pub_url = data.get("URL")
        conf_title = data.get("container-title")
        journal = data.get("journal", data.get("container-title"))
        publisher = data.get("publisher")
        # venue = data.get("venue")
        journal_pub = entry_type == "article-journal"
        conf_pub = entry_type == "paper-conference"

        bib_entry = get_bib_entry(bib_entries, data["id"])

        pub_str = f'{author_str}. ({year_str}) "{title_str}."'

        if journal is not None:
            pub_str += f" <em>{journal}</em>"
        elif publisher is not None:
            pub_str += f" <em>{publisher}</em>"

        if conf_title is not None:
            pub_str += f" In <em>{conf_title}</em>"

        if pub_doi is not None:
            pub_str += f" doi: {pub_doi} "

        if journal_pub:
            if year_str not in pub_strs["pubs"]:
                pub_strs["pubs"][year_str] = []
            if pub_doi is not None:
                buttons.append(
                    button(f"https://doi.org/{pub_doi}", "Published", "bi-journal-text")
                )
                buttons.append(doi_badge(pub_doi))
            elif pub_url is not None:
                buttons.append(button(pub_url, "Published", "bi-journal-text"))

            if bib_entry is not None:
                buttons.append(
                    button_copy_to_text("Copy .bib", bib_entry, "bi-clipboard")
                )

            pub_strs["pubs"][year_str].append(
                "<li class='list-group-item'>"
                + pub_str
                + "<br>"
                + " ".join(buttons)
                + "</li>"
            )

        elif conf_pub:
            if year_str not in pub_strs["confs"]:
                pub_strs["confs"][year_str] = []
            if pub_doi is not None:
                buttons.append(
                    button(f"https://doi.org/{pub_doi}", "Published", "bi-journal-text")
                )
                buttons.append(doi_badge(pub_doi))
            if bib_entry is not None:
                buttons.append(
                    button_copy_to_text("Copy .bib", bib_entry, "bi-clipboard")
                )

            elif pub_url is not None:
                buttons.append(button(pub_url, "Published", "bi-journal-text"))
            pub_strs["confs"][year_str].append(
                "<li class='list-group-item'>"
                + pub_str
                + "<br>"
                + " ".join(buttons)
                + "</li>"
            )

            if bib_entry is not None:
                buttons.append(
                    button_copy_to_text("Copy .bib", bib_entry, "bi-clipboard")
                )
        else:
            if year_str not in pub_strs["others"]:
                pub_strs["others"][year_str] = []
            if pub_doi is not None:
                buttons.append(
                    button(f"https://doi.org/{pub_doi}", "Published", "bi-journal-text")
                )
                buttons.append(doi_badge(pub_doi))

            elif pub_url is not None:
                buttons.append(button(pub_url, "Published", "bi-journal-text"))
            pub_strs["others"][year_str].append(
                "<li class='list-group-item'>"
                + pub_str
                + "<br>"
                + " ".join(buttons)
                + "</li>"
            )
            if bib_entry is not None:
                buttons.append(
                    button_copy_to_text("Copy .bib", bib_entry, "bi-clipboard")
                )
    except Exception as e:
        excepts[data["id"]] = e


```

## Journal Papers

```{python}
#| label: "published-year"
#| id: "published-year"
#| output: asis
for year in sorted(pub_strs["pubs"].keys(), reverse=True):
    display(Markdown(f"### {year}" + "{#" + f"published-{year}" + "}"))
    display(HTML(
        "<ul class='list-group list-group-flush'>" + '\n'.join(pub_strs["pubs"][year]) + "</ul>"
    ))
```

## Conference Papers

```{python}
#| label: "confs-year"
#| id: "confs-year"
#| output: asis
for year in sorted(pub_strs["confs"].keys(), reverse=True):
    display(Markdown(f"### {year}" + "{#" + f"confs-{year}" + "}"))
    display(HTML(
        "<ul class='list-group list-group-flush'>" + '\n'.join(pub_strs["confs"][year]) + "</ul>"
    ))
```

## Other Publications

```{python}
#| label: "other-year"
#| id: "other-year"
#| output: asis
for year in sorted(pub_strs["others"].keys(), reverse=True):
    display(Markdown(f"### {year}" + "{#" + f"other-{year}" + "}"))
    display(HTML(
        "<ul class='list-group list-group-flush'>" + '\n'.join(pub_strs["others"][year]) + "</ul>"
    ))
```

::: {.content-hidden when-profile="production"}

```{python}
if len(excepts) > 0:
    display(
        Markdown(
            "::: {.callout-warning collapse='true'}\n"
            "### Exceptions\n"
            f"{len(excepts)} exceptions occurred while processing the data.\n\n"
            f"{excepts}\n"
            ":::"
        )
    )
```

:::