{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"List of Publications\"\n",
        "echo: false\n",
        "jupyter: python3\n",
        "section-divs: false\n",
        "keep-md: true\n",
        "keep-ipynb: true\n",
        "freeze: auto\n",
        "---\n",
        "\n",
        "\n",
        "## PhD Thesis\n",
        "\n",
        "You can download my PhD Thesis, titled [*Predictive Modelling of Complex Urban Soundscapes: Enabling an engineeering approach to soundscape design*](./Andrew%20Mitchell%20PhD%20Thesis%20Final.pdf).\n"
      ],
      "id": "aa0ceb68"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| warning: false\n",
        "#| output: false\n",
        "import yaml\n",
        "from bib2yaml import bib2yaml\n",
        "from IPython.display import display, Markdown, HTML\n",
        "\n",
        "def readable_list(_s):\n",
        "  if len(_s) < 3:\n",
        "    return ' and '.join(map(str, _s))\n",
        "  *a, b = _s\n",
        "  return f\"{', '.join(map(str, a))}, and {b}\"\n",
        "\n",
        "def button(url, str, icon):\n",
        "    icon_base = icon[:2]\n",
        "    return f\"\"\"<a class=\"btn btn-outline-dark btn-sm\", href=\"{url}\" target=\"_blank\" rel=\"noopener noreferrer\">\n",
        "        <i class=\"{icon_base} {icon}\" role='img' aria-label='{str}'></i>\n",
        "        {str}\n",
        "    </a>\"\"\"\n",
        "\n",
        "def get_authors(author_str: str):\n",
        "    authors = author_str.split(\" and \")\n",
        "    authors = [aut.strip() for aut in authors]\n",
        "    try:\n",
        "        authors = [f\"{aut.split(',')[1].strip()} {aut.split(',')[0].strip()}\" for aut in authors]\n",
        "    except:\n",
        "        pass\n",
        "    return authors\n",
        "\n",
        "def doi_badge(doi_str: str):\n",
        "    return f'<span class=\"__dimensions_badge_embed__\" data-doi={doi_str} data-hide-zero-citations=\"true\" data-style=\"small_rectangle\"></span><script async src=\"https://badge.dimensions.ai/badge.js\" charset=\"utf-8\"></script>'\n",
        "\n",
        "\n",
        "bib2yaml(\"MitchellPublications.bib\", \"./\", \"publications\")\n",
        "\n",
        "me = \"Andrew Mitchell\"\n",
        "yaml_data = yaml.safe_load(open(\"publications.yml\"))\n",
        "pub_strs = {\"pubs\": {}, \"confs\": {}, \"others\": {}}\n",
        "for data in yaml_data:\n",
        "    title_str = data[\"title\"]\n",
        "    entry_type = data.get(\"ENTRYTYPE\")\n",
        "    authors = get_authors(data[\"author\"])\n",
        "    authors = [aut if aut != me else \"<strong>Andrew Mitchell</strong>\" for aut in authors]\n",
        "    if len(authors) > 6: \n",
        "        authors = authors[:6]\n",
        "        authors.append(\"et. al\")\n",
        "    author_str = readable_list(authors)\n",
        "    year_str = data[\"year\"]\n",
        "\n",
        "    buttons = []\n",
        "    preprint = data.get(\"preprint\")\n",
        "    if preprint is not None:\n",
        "        buttons.append(button(preprint, \"Preprint\", \"bi-file-earmark-pdf\"))\n",
        "\n",
        "    github = data.get(\"github\")\n",
        "    if github is not None:\n",
        "        buttons.append(button(github, \"Github\", \"bi-github\"))\n",
        "\n",
        "    pub_doi = data.get(\"doi\")\n",
        "    pub_url = data.get(\"url\")\n",
        "    conf_title = data.get(\"booktitle\")\n",
        "    journal = data.get(\"journal\", data.get(\"journaltitle\"))\n",
        "    publisher = data.get(\"publisher\")\n",
        "    # venue = data.get(\"venue\")\n",
        "    journal_pub = entry_type == 'article'\n",
        "    conf_pub = entry_type == 'inproceedings' \n",
        "    \n",
        "    pub_str = f'{author_str}. ({year_str}) \"{title_str}.\"'\n",
        "\n",
        "    if journal is not None:\n",
        "        pub_str += f\" <em>{journal}</em>\"\n",
        "    elif publisher is not None:\n",
        "        pub_str += f\" <em>{publisher}</em>\"\n",
        "\n",
        "    if conf_title is not None:\n",
        "        pub_str += f\" In <em>{conf_title}</em>\"\n",
        "\n",
        "    if pub_doi is not None:\n",
        "        pub_str += f\" doi: {pub_doi} \"\n",
        "\n",
        "    if journal_pub:\n",
        "        if year_str not in pub_strs[\"pubs\"]:\n",
        "            pub_strs[\"pubs\"][year_str] = []\n",
        "        if pub_doi is not None:\n",
        "            buttons.append(button(f\"https://doi.org/{pub_doi}\", \"Published\", \"bi-journal-text\"))\n",
        "            buttons.append(doi_badge(pub_doi))\n",
        "        elif pub_url is not None:\n",
        "            buttons.append(button(pub_url, \"Published\", \"bi-journal-text\"))\n",
        "\n",
        "        pub_strs[\"pubs\"][year_str].append(\n",
        "            \"<li class='list-group-item'>\" + pub_str + \"<br>\" + \" \".join(buttons) + \"</li>\"\n",
        "        )\n",
        "\n",
        "    elif conf_pub:\n",
        "        if year_str not in pub_strs[\"confs\"]:\n",
        "            pub_strs[\"confs\"][year_str] = []\n",
        "        if pub_doi is not None:\n",
        "            buttons.append(button(f\"https://doi.org/{pub_doi}\", \"Published\", \"bi-journal-text\"))\n",
        "            buttons.append(doi_badge(pub_doi))\n",
        "\n",
        "        elif pub_url is not None:\n",
        "            buttons.append(button(pub_url, \"Published\", \"bi-journal-text\"))\n",
        "        pub_strs[\"confs\"][year_str].append(\n",
        "            \"<li class='list-group-item'>\" + pub_str + \"<br>\" + \" \".join(buttons) + \"</li>\"\n",
        "        )\n",
        "    else:\n",
        "        if year_str not in pub_strs[\"others\"]:\n",
        "            pub_strs[\"others\"][year_str] = []\n",
        "        if pub_doi is not None:\n",
        "            buttons.append(button(f\"https://doi.org/{pub_doi}\", \"Published\", \"bi-journal-text\"))\n",
        "            buttons.append(doi_badge(pub_doi))\n",
        "\n",
        "        elif pub_url is not None:\n",
        "            buttons.append(button(pub_url, \"Published\", \"bi-journal-text\"))\n",
        "        pub_strs[\"others\"][year_str].append(\n",
        "            \"<li class='list-group-item'>\" + pub_str + \"<br>\" + \" \".join(buttons) + \"</li>\"\n",
        "        )"
      ],
      "id": "05d62976",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Journal Papers\n"
      ],
      "id": "d8ae2af9"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: published-year\n",
        "#| output: asis\n",
        "for year in sorted(pub_strs[\"pubs\"].keys(), reverse=True):\n",
        "    display(Markdown(f\"### {year}\" + \"{#\" + f\"published-{year}\" + \"}\"))\n",
        "    display(HTML(\n",
        "        \"<ul class='list-group list-group-flush'>\" + '\\n'.join(pub_strs[\"pubs\"][year]) + \"</ul>\"\n",
        "    ))"
      ],
      "id": "published-year",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Conference Papers\n"
      ],
      "id": "04891c5b"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: confs-year\n",
        "#| output: asis\n",
        "for year in sorted(pub_strs[\"confs\"].keys(), reverse=True):\n",
        "    display(Markdown(f\"### {year}\" + \"{#\" + f\"confs-{year}\" + \"}\"))\n",
        "    display(HTML(\n",
        "        \"<ul class='list-group list-group-flush'>\" + '\\n'.join(pub_strs[\"confs\"][year]) + \"</ul>\"\n",
        "    ))"
      ],
      "id": "confs-year",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Other Publications\n"
      ],
      "id": "b2caa463"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: other-year\n",
        "#| output: asis\n",
        "for year in sorted(pub_strs[\"others\"].keys(), reverse=True):\n",
        "    display(Markdown(f\"### {year}\" + \"{#\" + f\"other-{year}\" + \"}\"))\n",
        "    display(HTML(\n",
        "        \"<ul class='list-group list-group-flush'>\" + '\\n'.join(pub_strs[\"others\"][year]) + \"</ul>\"\n",
        "    ))"
      ],
      "id": "other-year",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/Users/mitch/Documents/GitHub/quarto-website/.venv/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}