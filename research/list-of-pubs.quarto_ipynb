{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"List of Publications\"\n",
        "echo: false\n",
        "jupyter: python3\n",
        "section-divs: false\n",
        "keep-md: true\n",
        "keep-ipynb: true\n",
        "freeze: auto\n",
        "---\n",
        "\n",
        "\n",
        "## PhD Thesis\n",
        "\n",
        "You can download my PhD Thesis, titled [*Predictive Modelling of Complex Urban Soundscapes: Enabling an engineeering approach to soundscape design*](./Andrew%20Mitchell%20PhD%20Thesis%20Final.pdf).\n"
      ],
      "id": "8612570e"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# | warning: false\n",
        "# | output: false\n",
        "import yaml\n",
        "from bib2yaml import bib2yaml\n",
        "from IPython.display import display, Markdown, HTML\n",
        "\n",
        "\n",
        "def readable_list(_s):\n",
        "    if len(_s) < 3:\n",
        "        return \" and \".join(map(str, _s))\n",
        "    *a, b = _s\n",
        "    return f\"{', '.join(map(str, a))}, and {b}\"\n",
        "\n",
        "\n",
        "def button(url, str, icon):\n",
        "    icon_base = icon[:2]\n",
        "    return f\"\"\"<a class=\"btn btn-outline-dark btn-sm\", href=\"{url}\" target=\"_blank\" rel=\"noopener noreferrer\">\n",
        "        <i class=\"{icon_base} {icon}\" role='img' aria-label='{str}'></i>\n",
        "        {str}\n",
        "    </a>\"\"\"\n",
        "\n",
        "\n",
        "def get_authors(author_str: list[dict]):\n",
        "    try:\n",
        "        authors = [f\"{aut['given']} {aut['family']}\" for aut in author_str]\n",
        "    except:\n",
        "        pass\n",
        "    return authors\n",
        "\n",
        "\n",
        "def doi_badge(doi_str: str):\n",
        "    return f'<span class=\"__dimensions_badge_embed__\" data-doi={doi_str} data-hide-zero-citations=\"true\" data-style=\"small_rectangle\"></span><script async src=\"https://badge.dimensions.ai/badge.js\" charset=\"utf-8\"></script>'\n",
        "\n",
        "\n",
        "me = \"Andrew Mitchell\"\n",
        "yaml_data = yaml.safe_load(open(\"MitchellPublications.yaml\"))\n",
        "pub_strs = {\"pubs\": {}, \"confs\": {}, \"others\": {}}\n",
        "\n",
        "excepts = {}\n",
        "for data in yaml_data[\"references\"]:\n",
        "    try:\n",
        "        title_str = data[\"title\"]\n",
        "        entry_type = data.get(\"type\")\n",
        "        authors = get_authors(data[\"author\"])\n",
        "        authors = [\n",
        "            aut if aut != me else \"<strong>Andrew Mitchell</strong>\" for aut in authors\n",
        "        ]\n",
        "        if len(authors) > 6:\n",
        "            authors = authors[:6]\n",
        "            authors.append(\"et. al\")\n",
        "        author_str = readable_list(authors)\n",
        "\n",
        "        year_str = data[\"issued\"][0][\"year\"]\n",
        "\n",
        "        buttons = []\n",
        "        preprint = data.get(\"preprint\")\n",
        "        if preprint is not None:\n",
        "            buttons.append(button(preprint, \"Preprint\", \"bi-file-earmark-pdf\"))\n",
        "\n",
        "        github = data.get(\"github\")\n",
        "        if github is not None:\n",
        "            buttons.append(button(github, \"Github\", \"bi-github\"))\n",
        "\n",
        "        pub_doi = data.get(\"DOI\")\n",
        "        pub_url = data.get(\"URL\")\n",
        "        conf_title = data.get(\"container-title\")\n",
        "        journal = data.get(\"journal\", data.get(\"container-title\"))\n",
        "        publisher = data.get(\"publisher\")\n",
        "        # venue = data.get(\"venue\")\n",
        "        journal_pub = entry_type == \"article-journal\"\n",
        "        conf_pub = entry_type == \"paper-conference\"\n",
        "\n",
        "        pub_str = f'{author_str}. ({year_str}) \"{title_str}.\"'\n",
        "\n",
        "        if journal is not None:\n",
        "            pub_str += f\" <em>{journal}</em>\"\n",
        "        elif publisher is not None:\n",
        "            pub_str += f\" <em>{publisher}</em>\"\n",
        "\n",
        "        if conf_title is not None:\n",
        "            pub_str += f\" In <em>{conf_title}</em>\"\n",
        "\n",
        "        if pub_doi is not None:\n",
        "            pub_str += f\" doi: {pub_doi} \"\n",
        "\n",
        "        if journal_pub:\n",
        "            if year_str not in pub_strs[\"pubs\"]:\n",
        "                pub_strs[\"pubs\"][year_str] = []\n",
        "            if pub_doi is not None:\n",
        "                buttons.append(\n",
        "                    button(f\"https://doi.org/{pub_doi}\", \"Published\", \"bi-journal-text\")\n",
        "                )\n",
        "                buttons.append(doi_badge(pub_doi))\n",
        "            elif pub_url is not None:\n",
        "                buttons.append(button(pub_url, \"Published\", \"bi-journal-text\"))\n",
        "\n",
        "            pub_strs[\"pubs\"][year_str].append(\n",
        "                \"<li class='list-group-item'>\"\n",
        "                + pub_str\n",
        "                + \"<br>\"\n",
        "                + \" \".join(buttons)\n",
        "                + \"</li>\"\n",
        "            )\n",
        "\n",
        "        elif conf_pub:\n",
        "            if year_str not in pub_strs[\"confs\"]:\n",
        "                pub_strs[\"confs\"][year_str] = []\n",
        "            if pub_doi is not None:\n",
        "                buttons.append(\n",
        "                    button(f\"https://doi.org/{pub_doi}\", \"Published\", \"bi-journal-text\")\n",
        "                )\n",
        "                buttons.append(doi_badge(pub_doi))\n",
        "\n",
        "            elif pub_url is not None:\n",
        "                buttons.append(button(pub_url, \"Published\", \"bi-journal-text\"))\n",
        "            pub_strs[\"confs\"][year_str].append(\n",
        "                \"<li class='list-group-item'>\"\n",
        "                + pub_str\n",
        "                + \"<br>\"\n",
        "                + \" \".join(buttons)\n",
        "                + \"</li>\"\n",
        "            )\n",
        "        else:\n",
        "            if year_str not in pub_strs[\"others\"]:\n",
        "                pub_strs[\"others\"][year_str] = []\n",
        "            if pub_doi is not None:\n",
        "                buttons.append(\n",
        "                    button(f\"https://doi.org/{pub_doi}\", \"Published\", \"bi-journal-text\")\n",
        "                )\n",
        "                buttons.append(doi_badge(pub_doi))\n",
        "\n",
        "            elif pub_url is not None:\n",
        "                buttons.append(button(pub_url, \"Published\", \"bi-journal-text\"))\n",
        "            pub_strs[\"others\"][year_str].append(\n",
        "                \"<li class='list-group-item'>\"\n",
        "                + pub_str\n",
        "                + \"<br>\"\n",
        "                + \" \".join(buttons)\n",
        "                + \"</li>\"\n",
        "            )\n",
        "    except Exception as e:\n",
        "        excepts[data[\"id\"]] = e\n"
      ],
      "id": "199accf0",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Journal Papers\n"
      ],
      "id": "f600d121"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: published-year\n",
        "#| output: asis\n",
        "for year in sorted(pub_strs[\"pubs\"].keys(), reverse=True):\n",
        "    display(Markdown(f\"### {year}\" + \"{#\" + f\"published-{year}\" + \"}\"))\n",
        "    display(HTML(\n",
        "        \"<ul class='list-group list-group-flush'>\" + '\\n'.join(pub_strs[\"pubs\"][year]) + \"</ul>\"\n",
        "    ))"
      ],
      "id": "published-year",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Conference Papers\n"
      ],
      "id": "d0ab231f"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: confs-year\n",
        "#| output: asis\n",
        "for year in sorted(pub_strs[\"confs\"].keys(), reverse=True):\n",
        "    display(Markdown(f\"### {year}\" + \"{#\" + f\"confs-{year}\" + \"}\"))\n",
        "    display(HTML(\n",
        "        \"<ul class='list-group list-group-flush'>\" + '\\n'.join(pub_strs[\"confs\"][year]) + \"</ul>\"\n",
        "    ))"
      ],
      "id": "confs-year",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Other Publications\n"
      ],
      "id": "fd63f96b"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: other-year\n",
        "#| output: asis\n",
        "for year in sorted(pub_strs[\"others\"].keys(), reverse=True):\n",
        "    display(Markdown(f\"### {year}\" + \"{#\" + f\"other-{year}\" + \"}\"))\n",
        "    display(HTML(\n",
        "        \"<ul class='list-group list-group-flush'>\" + '\\n'.join(pub_strs[\"others\"][year]) + \"</ul>\"\n",
        "    ))"
      ],
      "id": "other-year",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "::: {.content-hidden when-profile=\"production\"}\n"
      ],
      "id": "6b24353e"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "if len(excepts) > 0:\n",
        "    display(\n",
        "        Markdown(\n",
        "            \"::: {.callout-warning collapse='true'}\\n\"\n",
        "            \"### Exceptions\\n\"\n",
        "            f\"{len(excepts)} exceptions occurred while processing the data.\\n\\n\"\n",
        "            f\"{excepts}\\n\"\n",
        "            \":::\"\n",
        "        )\n",
        "    )"
      ],
      "id": "09d3f14c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::"
      ],
      "id": "96013027"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/Users/mitch/Documents/GitHub/quarto-website/.venv/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}