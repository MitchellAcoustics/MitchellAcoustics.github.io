---
layout: post
title: Which is louder - a wind turbine or your refrigerator?
date: today
tags: [soundscape, publications]
noindex: false
sidebar: false
code-fold: true
draft: true
---

# Which is louder - a wind turbine or your refrigerator?

Starting source for calculation: https://myworkspace.dnv.com/download/public/renewables/windfarmer/manuals/latest/CalcRef/Noise/noise.html 

```{python}
import numpy as np

def swl_turbine_i(l_w, d_c, a_tot):
    """
    Calculate the sound power level of a wind turbine
    :param l_w: sound power level of the wind turbine
    :param d_c: directivity correction in decibels
    :param a: attenuation total
    :return: sound pressure level of the wind turbine at distance d
    """
    return l_w + d_c - a

def a_tot(a_div, a_atm, a_gr, a_bar, a_misc, a_met):
    """
    Calculate the total attenuation
    :param a_div: divergence attenuation
    :param a_atm: atmospheric attenuation
    :param a_gr: ground attenuation
    :param a_bar: barrier attenuation
    :param a_misc: miscellaneous attenuation
    :param a_met: meteorological attenuation
    :return: total attenuation
    """
    return a_div + a_atm + a_gr + a_bar + a_misc + a_met

def a_div(d, d_0 = 1.0, temp=20, hum=70):
    """
    Accounts for spherical spreading in the free field from a point sound source over hard ground.
    :param d: distance from the source
    :return: divergence attenuation
    """

    return 20 * np.log10(d/d_0) + 11

A = {
    10: {
        70: (0.1, 0.4, 1.0, 1.9, 3.7, 9.7, 32.8, 117.0),
    },
    20: {
        70: (0.1, 0.3, 1.1, 2.8, 5.0, 9.0, 22.9, 76.6),
    },
    30: {
        70: (0.1, 0.3, 1.0, 3.1, 7.4, 12.7, 23.1, 59.3),
    },
    15: {
        20: (0.3, 0.6, 1.2, 2.7, 8.2, 28.2, 88.8, 202.0),
        50: (0.1, 0.5, 1.2, 2.2, 4.2, 10.8, 36.2, 129.0),
        70: (0.1, 0.3, 1.1, 2.4, 4.1, 8.3, 23.7, 82.8),
    },
}

def a_atm(a, d):
    """
    Accounts for atmospheric absorption
    :param a: atmospheric absorption coefficient
    :param d: distance from the source
    :return: atmospheric attenuation
    """
    return (a * d) / 1000



```